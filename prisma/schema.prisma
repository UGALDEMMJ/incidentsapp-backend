generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model incidencias {
  id_incidencias          String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_usuario              String                    @db.Uuid
  nombre                  String?                   @db.VarChar(100)
  descripcion             String?                   @db.VarChar(200)
  fecha_creacion          DateTime?                 @default(now()) @db.Timestamp(6)
  id_status               String                    @db.Uuid
  id_prioridad            String                    @db.Uuid
  prioridad               prioridad                 @relation(fields: [id_prioridad], references: [id_prioridad], onDelete: Cascade, onUpdate: NoAction)
  status                  status                    @relation(fields: [id_status], references: [id_status], onDelete: Cascade, onUpdate: NoAction)
  usuarios                usuarios                  @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: NoAction)
  respondersporincidencia respondersporincidencia[]
  timeline                timeline[]
  watchersporincidencia   watchersporincidencia[]
}

model prioridad {
  id_prioridad String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre       String?       @unique @db.VarChar(50)
  color        String?       @db.VarChar(20)
  incidencias  incidencias[]
}

model respondersporincidencia {
  id_incidencia String      @db.Uuid
  id_usuario    String      @db.Uuid
  incidencias   incidencias @relation(fields: [id_incidencia], references: [id_incidencias], onDelete: Cascade, onUpdate: NoAction)
  usuarios      usuarios    @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: NoAction)

  @@id([id_incidencia, id_usuario])
}

model rol {
  id_rol          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre          String?           @db.VarChar(100)
  descripcion     String?           @db.VarChar(100)
  rolesporusuario rolesporusuario[]
}

model rolesporusuario {
  id_rol     String   @db.Uuid
  id_usuario String   @db.Uuid
  rol        rol      @relation(fields: [id_rol], references: [id_rol], onDelete: Cascade, onUpdate: NoAction)
  usuarios   usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: NoAction)

  @@id([id_rol, id_usuario])
}

model status {
  id_status                            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre                               String?       @unique @db.VarChar(100)
  incidencias                          incidencias[]
  timeline_timeline_newstatusTostatus  timeline[]    @relation("timeline_newstatusTostatus")
  timeline_timeline_prevstatusTostatus timeline[]    @relation("timeline_prevstatusTostatus")
}

model timeline {
  id_timeline                        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_incidencia                      String      @db.Uuid
  descripcion                        String?     @db.VarChar(200)
  fecha                              DateTime?   @default(now()) @db.Timestamp(6)
  prevstatus                         String?     @db.Uuid
  newstatus                          String?     @db.Uuid
  id_usuario                         String      @db.Uuid
  incidencias                        incidencias @relation(fields: [id_incidencia], references: [id_incidencias], onDelete: Cascade, onUpdate: NoAction)
  usuarios                           usuarios    @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: NoAction)
  status_timeline_newstatusTostatus  status?     @relation("timeline_newstatusTostatus", fields: [newstatus], references: [id_status], onUpdate: NoAction)
  status_timeline_prevstatusTostatus status?     @relation("timeline_prevstatusTostatus", fields: [prevstatus], references: [id_status], onUpdate: NoAction)
}

model usuarios {
  id_usuario              String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombrecompleto          String                    @db.VarChar(100)
  correo                  String                    @unique @db.VarChar(100)
  username                String                    @unique @db.VarChar(100)
  password_hash           String                    @db.VarChar(255)
  enable                  Boolean?                  @default(true)
  fecha_registro          DateTime?                 @default(now()) @db.Timestamp(6)
  incidencias             incidencias[]
  respondersporincidencia respondersporincidencia[]
  rolesporusuario         rolesporusuario[]
  timeline                timeline[]
  watchersporincidencia   watchersporincidencia[]
}

model watchersporincidencia {
  id_incidencia String      @db.Uuid
  id_usuario    String      @db.Uuid
  incidencias   incidencias @relation(fields: [id_incidencia], references: [id_incidencias], onDelete: Cascade, onUpdate: NoAction)
  usuarios      usuarios    @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)

  @@id([id_incidencia, id_usuario])
}
